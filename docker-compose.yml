services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-webrtc_db}
      POSTGRES_USER: ${DB_USER:-webrtc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-webrtc_password}
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - webrtc-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-webrtc_user} -d ${DB_NAME:-webrtc_db}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # NestJS Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-webrtc_db}
      - DB_USER=${DB_USER:-webrtc_user}
      - DB_PASSWORD=${DB_PASSWORD:-webrtc_password}
      - JWT_SECRET=${JWT_SECRET:-dev-super-secret-jwt-key-change-in-production}
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=4000
    ports:
      - "${BACKEND_PORT:-3001}:4000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - webrtc-network
    command: npm run start:dev
    restart: unless-stopped

  # Rust Signaling Server
  signaling:
    build:
      context: ./signaling
      dockerfile: Dockerfile
    environment:
      - JWT_SECRET=${JWT_SECRET:-dev-super-secret-jwt-key-change-in-production}
      - RUST_LOG=${RUST_LOG:-info}
    ports:
      - "${SIGNALING_PORT:-3002}:9000"
    volumes:
      - ./signaling:/app
    networks:
      - webrtc-network
    restart: unless-stopped

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    environment:
      - VITE_API_URL=http://localhost:${BACKEND_PORT:-3001}
      - VITE_WS_URL=ws://localhost:${SIGNALING_PORT:-3002}
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    depends_on:
      - backend
      - signaling
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - webrtc-network
    command: npm run dev
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  webrtc-network:
    driver: bridge
